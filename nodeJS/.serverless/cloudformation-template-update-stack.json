{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CreatePollLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-createPoll"
      }
    },
    "UpdatePollLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-updatePoll"
      }
    },
    "GetPollLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-getPoll"
      }
    },
    "DeletePollLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-deletePoll"
      }
    },
    "GetAllPollsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-getAllPolls"
      }
    },
    "GetPollByTitleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-getPollByTitle"
      }
    },
    "AddResultLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-addResult"
      }
    },
    "SaveRandomResultsBotLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-saveRandomResultsBot"
      }
    },
    "CallBotLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-callBot"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "polls-api-nodejs",
                  "tesis",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/polls-api-nodejs-tesis*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/polls-api-nodejs-tesis*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:DescribeTable",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:PutItem",
                    "lambda:InvokeFunction",
                    "lambda:InvokeAsync"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/polls",
                    "arn:aws:dynamodb:us-east-1:*:table/polls/index/ListPollsTitles",
                    "arn:aws:lambda:us-east-1:735585965178:function:polls-api-nodejs-tesis-saveRandomResultsBot",
                    "arn:aws:dynamodb:us-east-1:*:table/polls/index/SearchPollByTitle"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "polls-api-nodejs",
              "tesis",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CreatePollLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/createPoll.zip"
        },
        "Handler": "src/api/handlers/polls/createPoll/createPollHandler.createPoll",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-createPoll",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreatePollLogGroup"
      ]
    },
    "UpdatePollLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/updatePoll.zip"
        },
        "Handler": "src/api/handlers/polls/updatePoll/updatePollHandler.updatePoll",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-updatePoll",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdatePollLogGroup"
      ]
    },
    "GetPollLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/getPoll.zip"
        },
        "Handler": "src/api/handlers/polls/getPoll/getPollHandler.getPoll",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-getPoll",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetPollLogGroup"
      ]
    },
    "DeletePollLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/deletePoll.zip"
        },
        "Handler": "src/api/handlers/polls/deletePoll/deletePollHandler.deletePoll",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-deletePoll",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeletePollLogGroup"
      ]
    },
    "GetAllPollsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/getAllPolls.zip"
        },
        "Handler": "src/api/handlers/polls/getAllPolls/getAllPollsHandler.getAllPolls",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-getAllPolls",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllPollsLogGroup"
      ]
    },
    "GetPollByTitleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/getPollByTitle.zip"
        },
        "Handler": "src/api/handlers/polls/getPollByTitle/getPollByTitleHandler.getPollByTitle",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-getPollByTitle",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetPollByTitleLogGroup"
      ]
    },
    "AddResultLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/addResult.zip"
        },
        "Handler": "src/api/handlers/results/resultHandler.addResult",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-addResult",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddResultLogGroup"
      ]
    },
    "SaveRandomResultsBotLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/saveRandomResultsBot.zip"
        },
        "Handler": "src/bot/botHandler.run",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-saveRandomResultsBot",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveRandomResultsBotLogGroup"
      ]
    },
    "CallBotLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/polls-api-nodejs/tesis/1647118102946-2022-03-12T20:48:22.946Z/callBot.zip"
        },
        "Handler": "src/bot/botHandler.callBot",
        "Runtime": "nodejs12.x",
        "FunctionName": "polls-api-nodejs-tesis-callBot",
        "MemorySize": 1024,
        "Timeout": 15,
        "Environment": {
          "Variables": {
            "POLLS_TABLE_NAME": "polls",
            "POLLS_ID": "POLL",
            "RESULTS_ID": "RESULT",
            "ANSWER_ID": "ANSWER",
            "REGION": "us-east-1",
            "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
            "APIG_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "tesis"
                ]
              ]
            },
            "QUESTIONS_ID": "Q",
            "GROUPS_ID": "G"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CallBotLogGroup"
      ]
    },
    "GetPollLambdaVersion5gSMkJ9mt9EL5zAiirDo7lBdNGB2f3i3iTbpXXewHI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPollLambdaFunction"
        },
        "CodeSha256": "0lN+xgPNKORFXcwF9sWscNkIShAIdSh3SSDH30GDaUg="
      }
    },
    "UpdatePollLambdaVersionZNumwdcaK7Y3MWw4el5Akg0I0NwXD0xVL6ZDD3jPlw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdatePollLambdaFunction"
        },
        "CodeSha256": "n3GdShwKZqLAt+Cu84UojBNFA2XCVB8LhyWxA+TdpzI="
      }
    },
    "CreatePollLambdaVersionJgOEoqzcDJO2adkNCzWGp5xYnheq8gGStHj1OG4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreatePollLambdaFunction"
        },
        "CodeSha256": "c6tBKqDpdK4D6H4jvL2vJeRMey5PtNRvHopefKdnpDM="
      }
    },
    "GetAllPollsLambdaVersioncG0JRuVFpveNrALCdLlcsxZFUf2LruvsOFiLSSTRUA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllPollsLambdaFunction"
        },
        "CodeSha256": "tV0ZT579N6uq+12F5Ux9FDyRCUWdNe7PY8aO6iY4ESE="
      }
    },
    "GetPollByTitleLambdaVersionbavKvzlKaenJR4ndj6TqsP0TxioVIigaGIamGf1o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPollByTitleLambdaFunction"
        },
        "CodeSha256": "2OdNXxqDmvJjPU7bYTpKwU3dLcoT+lAwKzSALB3bCsk="
      }
    },
    "DeletePollLambdaVersionfDJaM7eDOad1zayeRp0hKuOtnkkxOeL3j0mQpVwNXRY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeletePollLambdaFunction"
        },
        "CodeSha256": "zZE1kmnZ6E5Pn7CJBZwv/mCGRYWNLn9/VDT2AXm3CpY="
      }
    },
    "AddResultLambdaVersionROz3Hml8QuRzTd7HDcEVyDy8oH5XDswFv9FGWwrW4I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddResultLambdaFunction"
        },
        "CodeSha256": "Yd14GMl8bn3HWnFGtCFexR9fN7yZ9Pi2FsSs/lyuX1w="
      }
    },
    "SaveRandomResultsBotLambdaVersionbtdNRO8vPM8d3RtZKE9RSFJsjptVZV7vNaC4mCgcSE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveRandomResultsBotLambdaFunction"
        },
        "CodeSha256": "8U5WjLh9D6jgi1/0VNEp3RLjRfrhmmBIKUSVOJ0E4BY="
      }
    },
    "CallBotLambdaVersionx53XVFrsc1gBwRXobblqUYtIi3p8j26NzQvLlbQN8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CallBotLambdaFunction"
        },
        "CodeSha256": "8U5WjLh9D6jgi1/0VNEp3RLjRfrhmmBIKUSVOJ0E4BY="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "tesis-polls-api-nodejs",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourcePolls": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "polls",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePollsIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePolls"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePollsGetpollbytitle": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePolls"
        },
        "PathPart": "getPollByTitle",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceResults": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "results",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBot": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "bot",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBotRun": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceBot"
        },
        "PathPart": "run",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBotCallbot": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceBot"
        },
        "PathPart": "callBot",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPollsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePolls"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreatePollLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPollsIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePollsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdatePollLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPollsIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePollsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetPollLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPollsIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePollsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeletePollLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPollsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePolls"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllPollsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPollsGetpollbytitleGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePollsGetpollbytitle"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetPollByTitleLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodResultsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceResults"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddResultLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodBotRunGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBotRun"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaveRandomResultsBotLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodBotCallbotGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBotCallbot"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CallBotLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1647118100459": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "tesis"
      },
      "DependsOn": [
        "ApiGatewayMethodPollsPost",
        "ApiGatewayMethodPollsIdVarPut",
        "ApiGatewayMethodPollsIdVarGet",
        "ApiGatewayMethodPollsIdVarDelete",
        "ApiGatewayMethodPollsGet",
        "ApiGatewayMethodPollsGetpollbytitleGet",
        "ApiGatewayMethodResultsPost",
        "ApiGatewayMethodBotRunGet",
        "ApiGatewayMethodBotCallbotGet"
      ]
    },
    "CreatePollLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreatePollLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdatePollLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdatePollLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetPollLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPollLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeletePollLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeletePollLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAllPollsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllPollsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetPollByTitleLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPollByTitleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddResultLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddResultLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveRandomResultsBotLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveRandomResultsBotLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CallBotLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CallBotLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PollsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "polls",
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "GSI1PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "title",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "ListPollsTitles",
            "KeySchema": [
              {
                "AttributeName": "GSI1PK",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "NonKeyAttributes": [
                "title"
              ],
              "ProjectionType": "INCLUDE"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          },
          {
            "IndexName": "SearchPollByTitle",
            "KeySchema": [
              {
                "AttributeName": "title",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "PK",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          },
          {
            "IndexName": "SKPK",
            "KeySchema": [
              {
                "AttributeName": "SK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "PK",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 14,
          "WriteCapacityUnits": 14
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "GetPollLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPollLambdaVersion5gSMkJ9mt9EL5zAiirDo7lBdNGB2f3i3iTbpXXewHI"
      }
    },
    "UpdatePollLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdatePollLambdaVersionZNumwdcaK7Y3MWw4el5Akg0I0NwXD0xVL6ZDD3jPlw"
      }
    },
    "CreatePollLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreatePollLambdaVersionJgOEoqzcDJO2adkNCzWGp5xYnheq8gGStHj1OG4"
      }
    },
    "GetAllPollsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllPollsLambdaVersioncG0JRuVFpveNrALCdLlcsxZFUf2LruvsOFiLSSTRUA"
      }
    },
    "GetPollByTitleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPollByTitleLambdaVersionbavKvzlKaenJR4ndj6TqsP0TxioVIigaGIamGf1o"
      }
    },
    "DeletePollLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeletePollLambdaVersionfDJaM7eDOad1zayeRp0hKuOtnkkxOeL3j0mQpVwNXRY"
      }
    },
    "AddResultLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddResultLambdaVersionROz3Hml8QuRzTd7HDcEVyDy8oH5XDswFv9FGWwrW4I"
      }
    },
    "SaveRandomResultsBotLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveRandomResultsBotLambdaVersionbtdNRO8vPM8d3RtZKE9RSFJsjptVZV7vNaC4mCgcSE"
      }
    },
    "CallBotLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CallBotLambdaVersionx53XVFrsc1gBwRXobblqUYtIi3p8j26NzQvLlbQN8"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/tesis"
          ]
        ]
      }
    }
  }
}