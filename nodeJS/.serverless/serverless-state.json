{
  "service": {
    "service": "polls-api-nodejs",
    "serviceObject": {
      "name": "polls-api-nodejs"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "lambdaHashingVersion": "20201221",
      "region": "us-east-1",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:DescribeTable",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:PutItem",
            "lambda:InvokeFunction",
            "lambda:InvokeAsync"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:*:table/polls",
            "arn:aws:dynamodb:us-east-1:*:table/polls/index/ListPollsTitles",
            "arn:aws:lambda:us-east-1:735585965178:function:polls-api-nodejs-tesis-saveRandomResultsBot",
            "arn:aws:dynamodb:us-east-1:*:table/polls/index/SearchPollByTitle"
          ]
        }
      ],
      "environment": {
        "POLLS_TABLE_NAME": "polls",
        "POLLS_ID": "POLL",
        "RESULTS_ID": "RESULT",
        "ANSWER_ID": "ANSWER",
        "REGION": "us-east-1",
        "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
        "APIG_URL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "ApiGatewayRestApi"
              },
              ".execute-api.",
              "us-east-1",
              ".amazonaws.com/",
              "tesis"
            ]
          ]
        },
        "QUESTIONS_ID": "Q",
        "GROUPS_ID": "G"
      },
      "stage": "dev",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreatePollLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-createPoll"
            }
          },
          "UpdatePollLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-updatePoll"
            }
          },
          "GetPollLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-getPoll"
            }
          },
          "DeletePollLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-deletePoll"
            }
          },
          "GetAllPollsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-getAllPolls"
            }
          },
          "GetPollByTitleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-getPollByTitle"
            }
          },
          "TestPollLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-testPoll"
            }
          },
          "AddResultLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-addResult"
            }
          },
          "SaveRandomResultsBotLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-saveRandomResultsBot"
            }
          },
          "CallBotLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/polls-api-nodejs-tesis-callBot"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "polls-api-nodejs",
                        "tesis",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/polls-api-nodejs-tesis*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/polls-api-nodejs-tesis*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "polls-api-nodejs",
                    "tesis",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreatePollLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/createPoll.zip"
              },
              "Handler": "src/api/handlers/polls/createPoll/createPollHandler.createPoll",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-createPoll",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePollLogGroup"
            ]
          },
          "UpdatePollLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/updatePoll.zip"
              },
              "Handler": "src/api/handlers/polls/updatePoll/updatePollHandler.updatePoll",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-updatePoll",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdatePollLogGroup"
            ]
          },
          "GetPollLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/getPoll.zip"
              },
              "Handler": "src/api/handlers/polls/getPoll/getPollHandler.getPoll",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-getPoll",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPollLogGroup"
            ]
          },
          "DeletePollLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/deletePoll.zip"
              },
              "Handler": "src/api/handlers/polls/deletePoll/deletePollHandler.deletePoll",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-deletePoll",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeletePollLogGroup"
            ]
          },
          "GetAllPollsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/getAllPolls.zip"
              },
              "Handler": "src/api/handlers/polls/getAllPolls/getAllPollsHandler.getAllPolls",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-getAllPolls",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllPollsLogGroup"
            ]
          },
          "GetPollByTitleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/getPollByTitle.zip"
              },
              "Handler": "src/api/handlers/polls/getPollByTitle/getPollByTitleHandler.getPollByTitle",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-getPollByTitle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPollByTitleLogGroup"
            ]
          },
          "TestPollLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/testPoll.zip"
              },
              "Handler": "src/api/handlers/polls/testPoll/testPollHandler.testPoll",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-testPoll",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TestPollLogGroup"
            ]
          },
          "AddResultLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/addResult.zip"
              },
              "Handler": "src/api/handlers/results/resultHandler.addResult",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-addResult",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddResultLogGroup"
            ]
          },
          "SaveRandomResultsBotLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/saveRandomResultsBot.zip"
              },
              "Handler": "src/bot/botHandler.run",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-saveRandomResultsBot",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveRandomResultsBotLogGroup"
            ]
          },
          "CallBotLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z/callBot.zip"
              },
              "Handler": "src/bot/botHandler.callBot",
              "Runtime": "nodejs12.x",
              "FunctionName": "polls-api-nodejs-tesis-callBot",
              "MemorySize": 1024,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "POLLS_TABLE_NAME": "polls",
                  "POLLS_ID": "POLL",
                  "RESULTS_ID": "RESULT",
                  "ANSWER_ID": "ANSWER",
                  "REGION": "us-east-1",
                  "SAVE_RANDOM_ANSWER_LAMBDA": "polls-api-nodejs-tesis-saveRandomResultsBot",
                  "APIG_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_URL\"]"
                  },
                  "QUESTIONS_ID": "Q",
                  "GROUPS_ID": "G"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CallBotLogGroup"
            ]
          },
          "UpdatePollLambdaVersionZNumwdcaK7Y3MWw4el5Akg0I0NwXD0xVL6ZDD3jPlw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdatePollLambdaFunction"
              },
              "CodeSha256": "n3GdShwKZqLAt+Cu84UojBNFA2XCVB8LhyWxA+TdpzI="
            }
          },
          "CreatePollLambdaVersionJgOEoqzcDJO2adkNCzWGp5xYnheq8gGStHj1OG4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePollLambdaFunction"
              },
              "CodeSha256": "c6tBKqDpdK4D6H4jvL2vJeRMey5PtNRvHopefKdnpDM="
            }
          },
          "DeletePollLambdaVersionfDJaM7eDOad1zayeRp0hKuOtnkkxOeL3j0mQpVwNXRY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePollLambdaFunction"
              },
              "CodeSha256": "zZE1kmnZ6E5Pn7CJBZwv/mCGRYWNLn9/VDT2AXm3CpY="
            }
          },
          "GetPollLambdaVersion5gSMkJ9mt9EL5zAiirDo7lBdNGB2f3i3iTbpXXewHI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPollLambdaFunction"
              },
              "CodeSha256": "0lN+xgPNKORFXcwF9sWscNkIShAIdSh3SSDH30GDaUg="
            }
          },
          "GetAllPollsLambdaVersioncG0JRuVFpveNrALCdLlcsxZFUf2LruvsOFiLSSTRUA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllPollsLambdaFunction"
              },
              "CodeSha256": "tV0ZT579N6uq+12F5Ux9FDyRCUWdNe7PY8aO6iY4ESE="
            }
          },
          "GetPollByTitleLambdaVersionbavKvzlKaenJR4ndj6TqsP0TxioVIigaGIamGf1o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPollByTitleLambdaFunction"
              },
              "CodeSha256": "2OdNXxqDmvJjPU7bYTpKwU3dLcoT+lAwKzSALB3bCsk="
            }
          },
          "TestPollLambdaVersionXuBThNLcLJU7XV34bMUKFadm9gRghCBISq4ZGe48": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TestPollLambdaFunction"
              },
              "CodeSha256": "77K50ApW1QDCY3p7QBZYNAksrFIb9ScohezpnilNmzc="
            }
          },
          "AddResultLambdaVersionROz3Hml8QuRzTd7HDcEVyDy8oH5XDswFv9FGWwrW4I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddResultLambdaFunction"
              },
              "CodeSha256": "Yd14GMl8bn3HWnFGtCFexR9fN7yZ9Pi2FsSs/lyuX1w="
            }
          },
          "SaveRandomResultsBotLambdaVersionbtdNRO8vPM8d3RtZKE9RSFJsjptVZV7vNaC4mCgcSE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveRandomResultsBotLambdaFunction"
              },
              "CodeSha256": "8U5WjLh9D6jgi1/0VNEp3RLjRfrhmmBIKUSVOJ0E4BY="
            }
          },
          "CallBotLambdaVersionx53XVFrsc1gBwRXobblqUYtIi3p8j26NzQvLlbQN8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CallBotLambdaFunction"
              },
              "CodeSha256": "8U5WjLh9D6jgi1/0VNEp3RLjRfrhmmBIKUSVOJ0E4BY="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "tesis-polls-api-nodejs",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourcePolls": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "polls",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePollsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePolls"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePollsGetpollbytitle": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePolls"
              },
              "PathPart": "getPollByTitle",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePollsTestpoll": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePolls"
              },
              "PathPart": "testpoll",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResults": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "results",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBot": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "bot",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBotRun": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBot"
              },
              "PathPart": "run",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBotCallbot": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBot"
              },
              "PathPart": "callBot",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPollsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePolls"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePollLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPollsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePollsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdatePollLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPollsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePollsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPollLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPollsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePollsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletePollLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPollsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePolls"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllPollsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPollsGetpollbytitleGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePollsGetpollbytitle"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPollByTitleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPollsTestpollGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePollsTestpoll"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TestPollLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodResultsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResults"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddResultLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodBotRunGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBotRun"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SaveRandomResultsBotLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodBotCallbotGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBotCallbot"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CallBotLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1648306029515": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "tesis"
            },
            "DependsOn": [
              "ApiGatewayMethodPollsPost",
              "ApiGatewayMethodPollsIdVarPut",
              "ApiGatewayMethodPollsIdVarGet",
              "ApiGatewayMethodPollsIdVarDelete",
              "ApiGatewayMethodPollsGet",
              "ApiGatewayMethodPollsGetpollbytitleGet",
              "ApiGatewayMethodPollsTestpollGet",
              "ApiGatewayMethodResultsPost",
              "ApiGatewayMethodBotRunGet",
              "ApiGatewayMethodBotCallbotGet"
            ]
          },
          "CreatePollLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePollLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdatePollLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdatePollLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPollLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPollLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeletePollLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletePollLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllPollsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllPollsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPollByTitleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPollByTitleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TestPollLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TestPollLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddResultLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddResultLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SaveRandomResultsBotLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveRandomResultsBotLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CallBotLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CallBotLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "UpdatePollLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdatePollLambdaVersionZNumwdcaK7Y3MWw4el5Akg0I0NwXD0xVL6ZDD3jPlw"
            }
          },
          "CreatePollLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePollLambdaVersionJgOEoqzcDJO2adkNCzWGp5xYnheq8gGStHj1OG4"
            }
          },
          "DeletePollLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePollLambdaVersionfDJaM7eDOad1zayeRp0hKuOtnkkxOeL3j0mQpVwNXRY"
            }
          },
          "GetPollLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPollLambdaVersion5gSMkJ9mt9EL5zAiirDo7lBdNGB2f3i3iTbpXXewHI"
            }
          },
          "GetAllPollsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllPollsLambdaVersioncG0JRuVFpveNrALCdLlcsxZFUf2LruvsOFiLSSTRUA"
            }
          },
          "GetPollByTitleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPollByTitleLambdaVersionbavKvzlKaenJR4ndj6TqsP0TxioVIigaGIamGf1o"
            }
          },
          "TestPollLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TestPollLambdaVersionXuBThNLcLJU7XV34bMUKFadm9gRghCBISq4ZGe48"
            }
          },
          "AddResultLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddResultLambdaVersionROz3Hml8QuRzTd7HDcEVyDy8oH5XDswFv9FGWwrW4I"
            }
          },
          "SaveRandomResultsBotLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveRandomResultsBotLambdaVersionbtdNRO8vPM8d3RtZKE9RSFJsjptVZV7vNaC4mCgcSE"
            }
          },
          "CallBotLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CallBotLambdaVersionx53XVFrsc1gBwRXobblqUYtIi3p8j26NzQvLlbQN8"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/tesis"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "createPoll": {
        "handler": "src/api/handlers/polls/createPoll/createPollHandler.createPoll",
        "package": {
          "patterns": [
            "src/api/handlers/polls/createPoll/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/createPoll.zip"
        },
        "events": [
          {
            "http": {
              "path": "polls",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-createPoll",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreatePollLambdaVersionJgOEoqzcDJO2adkNCzWGp5xYnheq8gGStHj1OG4"
      },
      "updatePoll": {
        "handler": "src/api/handlers/polls/updatePoll/updatePollHandler.updatePoll",
        "package": {
          "patterns": [
            "src/api/handlers/polls/updatePoll/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/updatePoll.zip"
        },
        "events": [
          {
            "http": {
              "path": "polls/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-updatePoll",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdatePollLambdaVersionZNumwdcaK7Y3MWw4el5Akg0I0NwXD0xVL6ZDD3jPlw"
      },
      "getPoll": {
        "handler": "src/api/handlers/polls/getPoll/getPollHandler.getPoll",
        "package": {
          "patterns": [
            "src/api/handlers/polls/getPoll/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/getPoll.zip"
        },
        "events": [
          {
            "http": {
              "path": "polls/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-getPoll",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetPollLambdaVersion5gSMkJ9mt9EL5zAiirDo7lBdNGB2f3i3iTbpXXewHI"
      },
      "deletePoll": {
        "handler": "src/api/handlers/polls/deletePoll/deletePollHandler.deletePoll",
        "package": {
          "patterns": [
            "src/api/handlers/polls/deletePoll/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/deletePoll.zip"
        },
        "events": [
          {
            "http": {
              "path": "polls/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-deletePoll",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeletePollLambdaVersionfDJaM7eDOad1zayeRp0hKuOtnkkxOeL3j0mQpVwNXRY"
      },
      "getAllPolls": {
        "handler": "src/api/handlers/polls/getAllPolls/getAllPollsHandler.getAllPolls",
        "package": {
          "patterns": [
            "src/api/handlers/polls/getAllPolls/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/getAllPolls.zip"
        },
        "events": [
          {
            "http": {
              "path": "polls",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-getAllPolls",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllPollsLambdaVersioncG0JRuVFpveNrALCdLlcsxZFUf2LruvsOFiLSSTRUA"
      },
      "getPollByTitle": {
        "handler": "src/api/handlers/polls/getPollByTitle/getPollByTitleHandler.getPollByTitle",
        "package": {
          "patterns": [
            "src/api/handlers/polls/getPollByTitle/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/getPollByTitle.zip"
        },
        "events": [
          {
            "http": {
              "path": "polls/getPollByTitle",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-getPollByTitle",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetPollByTitleLambdaVersionbavKvzlKaenJR4ndj6TqsP0TxioVIigaGIamGf1o"
      },
      "testPoll": {
        "handler": "src/api/handlers/polls/testPoll/testPollHandler.testPoll",
        "package": {
          "patterns": [
            "src/api/handlers/polls/testPoll/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/testPoll.zip"
        },
        "events": [
          {
            "http": {
              "path": "polls/testpoll",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-testPoll",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "TestPollLambdaVersionXuBThNLcLJU7XV34bMUKFadm9gRghCBISq4ZGe48"
      },
      "addResult": {
        "handler": "src/api/handlers/results/resultHandler.addResult",
        "package": {
          "patterns": [
            "src/api/handlers/results/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/addResult.zip"
        },
        "events": [
          {
            "http": {
              "path": "results",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-addResult",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddResultLambdaVersionROz3Hml8QuRzTd7HDcEVyDy8oH5XDswFv9FGWwrW4I"
      },
      "saveRandomResultsBot": {
        "handler": "src/bot/botHandler.run",
        "package": {
          "patterns": [
            "src/bot/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/saveRandomResultsBot.zip"
        },
        "events": [
          {
            "http": {
              "path": "bot/run",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-saveRandomResultsBot",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SaveRandomResultsBotLambdaVersionbtdNRO8vPM8d3RtZKE9RSFJsjptVZV7vNaC4mCgcSE"
      },
      "callBot": {
        "handler": "src/bot/botHandler.callBot",
        "timeout": 15,
        "package": {
          "patterns": [
            "src/bot/**"
          ],
          "artifact": "/home/mrbegueri/tesis/tesis/nodeJS/.serverless/callBot.zip"
        },
        "events": [
          {
            "http": {
              "path": "bot/callBot",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "polls-api-nodejs-tesis-callBot",
        "memory": 1024,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CallBotLambdaVersionx53XVFrsc1gBwRXobblqUYtIi3p8j26NzQvLlbQN8"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!./**",
          "./node_modules/**"
        ],
        "artifactDirectoryName": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/polls-api-nodejs/tesis/1648306031157-2022-03-26T14:47:11.157Z",
    "artifact": ""
  }
}